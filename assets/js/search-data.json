{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jnfarooq.github.io/MLDS/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jnfarooq.github.io/MLDS/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "import os; os.environ[&#39;CUDA_VISIBLE_DEVICES&#39;]=&#39;2&#39; from fastai2.vision.all import * from sklearn.metrics import confusion_matrix import seaborn as sns from sklearn.metrics import classification_report . p = Path(&#39;/home/phyn/Downloads/COVID/&#39;) . Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples, Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cividis, cividis_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, hsv_r, icefire, icefire_r, inferno, inferno_r, jet, jet_r, magma, magma_r, mako, mako_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, rocket, rocket_r, seismic, seismic_r, spring, spring_r, summer, summer_r, tab10, tab10_r, tab20, tab20_r, tab20b, tab20b_r, tab20c, tab20c_r, terrain, terrain_r, twilight, twilight_r, twilight_shifted, twilight_shifted_r, viridis, viridis_r, vlag, vlag_r, winter, winter_r &lt;Figure size 576x576 with 0 Axes&gt; labels_dict.values() . dict_values([&#39;Normal&#39;, &#39;Bacterial&#39;, &#39;Viral&#39;, &#39;COVID-19&#39;]) . # l . def plot_confusion_matrix(y_true, y_pred, cat=&#39;&#39;, confusion_plots_location=&#39;&#39;, model_type=&#39;&#39;): # lab = [&#39;Normal&#39;, &#39;Bacterial&#39;, &#39;Viral&#39;, &#39;COVID-19&#39;] data = confusion_matrix(y_true, y_pred) df_cm = pd.DataFrame(data, columns=np.unique(y_true), index=np.unique(y_true)) df_cm.index.name = &#39;Actual&#39; df_cm.columns.name = &#39;Predicted&#39; plt.figure(figsize=(8, 8)) sns.set(font_scale=1.0) # for label size sns.heatmap(df_cm, cmap=&quot;Blues&quot;, annot=True, fmt=&#39;d&#39;, annot_kws={&quot;size&quot;: 9}, cbar=False) plt.xticks(rotation=90) # font size plt.yticks(rotation=0) # font size plt.subplots_adjust(bottom=0.4) plt.subplots_adjust(left=0.4) # plt.subplots_adjust(right=0.5) # plt.title(f&#39;Accuracy: {np.round(accuracy_score(y_true, y_pred), 2)}&#39;) # plt.savefig(os.path.join(confusion_plots_location, f&#39;{cat}_Model.png&#39;)) # plt.close() . def test_function(learn): test_path = Path(&#39;COVID/test/&#39;) imgs = get_image_files(test_path) labels_dict = {0: &#39;Normal&#39;, 1: &#39;Bacterial&#39;, 2: &#39;Viral&#39;, 3: &#39;COVID-19&#39;} test_dl = learn.dls.test_dl dl = test_dl(imgs, labels=True) a,b,preds = learn.get_preds(dl=dl, with_decoded=True) labels = [labels_dict[int(str(x).split(&#39;/&#39;)[2])] for x in imgs] predictions = [labels_dict[i] for i in preds.tolist()] data = {&#39;y_Actual&#39;: labels, &#39;y_Predicted&#39;: predictions } print(classification_report(labels,predictions)) # df = pd.DataFrame(data, columns=[&#39;y_Actual&#39;,&#39;y_Predicted&#39;]) # confusion_matrix = pd.crosstab(df[&#39;y_Actual&#39;], df[&#39;y_Predicted&#39;], rownames=[&#39;Actual&#39;], colnames=[&#39;Predicted&#39;]) # sn.heatmap(confusion_matrix, annot=True) plot_confusion_matrix(labels,predictions) print(np.sum(np.array(labels)==np.array(predictions))/len(predictions)) . test_function(learn) . precision recall f1-score support Bacterial 0.97 0.98 0.97 246 COVID-19 1.00 1.00 1.00 8 Normal 0.99 0.97 0.98 234 Viral 0.91 0.93 0.92 149 accuracy 0.96 637 macro avg 0.97 0.97 0.97 637 weighted avg 0.96 0.96 0.96 637 0.9623233908948194 . os.path.exists(p/&#39;x_train.npy&#39;) . True . x = np.load(open(p/&#39;x_train.npy&#39;, &#39;rb&#39;), allow_pickle=True) y = np.load(open(p/&#39;y_train.npy&#39;, &#39;rb&#39;), allow_pickle=True) . plt.imshow(x[0]) . &lt;matplotlib.image.AxesImage at 0x7fedd0b07ca0&gt; . from fastai2.basics import * from fastai2.callback.progress import * from fastai2.vision.core import * from fastai2.callback import mixup . # x = np.load(open(p/&#39;x_train.npy&#39;, &#39;rb&#39;), allow_pickle=True) # y = np.load(open(p/&#39;y_train.npy&#39;, &#39;rb&#39;), allow_pickle=True) # for i, val in enumerate(y): # # print(i, val) # if not os.path.exists(f&#39;COVID/{val}&#39;): # os.makedirs(f&#39;COVID/{val}&#39;) # plt.imsave(f&#39;COVID/{val}/{i}.png&#39;, x[i]) . path = Path(&#39;COVID&#39;) . path.ls() . (#3) [Path(&#39;COVID/.ipynb_checkpoints&#39;),Path(&#39;COVID/train&#39;),Path(&#39;COVID/test&#39;)] . # covid = DataBlock(blocks=(ImageBlock, CategoryBlock), # get_items=get_image_files, # splitter=RandomSplitter(valid_pct=0.3, seed=42), # get_y=parent_label, # item_tfms=Resize(250), # batch_tfms=aug_transforms() # ) . def get_dls(bs, rsz, size): dblock = DataBlock(blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, get_y=parent_label, splitter=RandomSplitter(valid_pct=0.1, seed=42), item_tfms=Resize(rsz), batch_tfms=[*aug_transforms(size=size, do_flip=True, max_rotate=15, max_lighting=0.3, p_lighting=0.7), Normalize.from_stats(*imagenet_stats)] # batch_tfms=[*aug_transforms(size=size, min_scale=0.75), # Normalize.from_stats(*imagenet_stats)] ) return dblock.dataloaders(path, bs=bs, ) . # covid.summary(path) . dls = get_dls(32, 299, 128)#covid.dataloaders(path) . # torch.cuda.set_device(1) . dls.show_batch(max_n=9) . learn=cnn_learner(dls, resnet50, metrics=[error_rate, accuracy]) #cbs=ActivationStats(with_hist=True)) . # learn.unfreeze() . learn.lr_find() . (0.00831763744354248, 3.6307804407442745e-07) . learn.fine_tune(5, 1e-3, freeze_epochs=3) . epoch train_loss valid_loss error_rate accuracy time . 0 | 1.382318 | 1.078056 | 0.297980 | 0.702020 | 00:11 | . 1 | 1.092752 | 0.891477 | 0.274411 | 0.725589 | 00:11 | . 2 | 0.861831 | 0.734525 | 0.267677 | 0.732323 | 00:12 | . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.689878 | 0.595358 | 0.228956 | 0.771044 | 00:15 | . 1 | 0.591550 | 0.531434 | 0.213805 | 0.786195 | 00:15 | . 2 | 0.498660 | 0.479307 | 0.193603 | 0.806397 | 00:15 | . 3 | 0.466935 | 0.461024 | 0.190236 | 0.809764 | 00:15 | . 4 | 0.440449 | 0.458971 | 0.183502 | 0.816498 | 00:15 | . learn.save(&#39;covid-stage-1&#39;) . learn.dls = get_dls(16, 299, 224)#covid.dataloaders(path) learn.lr_find() . (5.248074739938602e-06, 3.6307804407442745e-07) . learn.load(&#39;covid-stage-1&#39;) learn.fine_tune(5, 1e-4, freeze_epochs=3) . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.571786 | 0.524019 | 0.200337 | 0.799663 | 00:30 | . 1 | 0.542086 | 0.504485 | 0.200337 | 0.799663 | 00:30 | . 2 | 0.538034 | 0.483118 | 0.207071 | 0.792929 | 00:30 | . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.512037 | 0.477243 | 0.212121 | 0.787879 | 00:38 | . 1 | 0.505932 | 0.466892 | 0.195286 | 0.804714 | 00:38 | . 2 | 0.470769 | 0.454831 | 0.193603 | 0.806397 | 00:38 | . 3 | 0.443926 | 0.462682 | 0.191919 | 0.808081 | 00:38 | . 4 | 0.447864 | 0.460147 | 0.191919 | 0.808081 | 00:38 | . test_function(learn) . precision recall f1-score support 0 0.98 0.88 0.93 234 1 0.90 0.97 0.94 246 2 0.85 0.85 0.85 149 3 0.80 1.00 0.89 8 accuracy 0.91 637 macro avg 0.88 0.93 0.90 637 weighted avg 0.92 0.91 0.91 637 0.9120879120879121 . learn.fit_one_cycle(5, lr_max=(2e-4)) . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.585521 | 0.806600 | 0.287879 | 0.712121 | 00:38 | . 1 | 0.576402 | 0.575073 | 0.230640 | 0.769360 | 00:38 | . 2 | 0.499649 | 0.537702 | 0.242424 | 0.757576 | 00:38 | . 3 | 0.458666 | 0.431950 | 0.196970 | 0.803030 | 00:38 | . 4 | 0.414459 | 0.400469 | 0.183502 | 0.816498 | 00:38 | . test_function(learn) . precision recall f1-score support 0 0.99 0.92 0.95 234 1 0.91 0.99 0.95 246 2 0.87 0.84 0.86 149 3 1.00 1.00 1.00 8 accuracy 0.93 637 macro avg 0.94 0.94 0.94 637 weighted avg 0.93 0.93 0.93 637 0.9293563579277865 . learn.dls = get_dls(32, 299, 299)#covid.dataloaders(path) learn.unfreeze() learn.lr_find() . (2.5118865210060903e-08, 2.2908675418875646e-06) . learn.fit_one_cycle(15, lr_max=slice(1e-6, 1e-4)) . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.392301 | 0.429061 | 0.183502 | 0.816498 | 01:00 | . 1 | 0.397918 | 0.441440 | 0.190236 | 0.809764 | 00:59 | . 2 | 0.371878 | 0.427969 | 0.183502 | 0.816498 | 00:58 | . 3 | 0.382880 | 0.415570 | 0.173401 | 0.826599 | 00:58 | . 4 | 0.370703 | 0.417850 | 0.185185 | 0.814815 | 00:58 | . 5 | 0.350986 | 0.407898 | 0.171717 | 0.828283 | 00:58 | . 6 | 0.345999 | 0.417498 | 0.180135 | 0.819865 | 00:58 | . 7 | 0.334241 | 0.405694 | 0.170034 | 0.829966 | 00:58 | . 8 | 0.318102 | 0.403582 | 0.171717 | 0.828283 | 00:58 | . 9 | 0.305081 | 0.400726 | 0.164983 | 0.835017 | 00:59 | . 10 | 0.325598 | 0.395377 | 0.166667 | 0.833333 | 00:58 | . 11 | 0.313449 | 0.393071 | 0.161616 | 0.838384 | 00:59 | . 12 | 0.304235 | 0.398107 | 0.164983 | 0.835017 | 00:58 | . 13 | 0.302617 | 0.403078 | 0.166667 | 0.833333 | 00:59 | . 14 | 0.294114 | 0.396028 | 0.163300 | 0.836700 | 00:59 | . learn.save(&#39;covid-stage-2-final&#39;) . learn.load(&#39;covid-stage-2-final&#39;) . &lt;fastai2.learner.Learner at 0x7fedd0ec5b20&gt; . test_function(learn) . precision recall f1-score support 0 0.98 0.97 0.97 234 1 0.94 0.97 0.95 246 2 0.91 0.88 0.89 149 3 1.00 1.00 1.00 8 accuracy 0.95 637 macro avg 0.96 0.95 0.95 637 weighted avg 0.95 0.95 0.95 637 0.9466248037676609 . learn.fit_one_cycle(15, lr_max=slice(1e-6, 1e-4)) . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.298222 | 0.389469 | 0.158249 | 0.841751 | 00:58 | . 1 | 0.321477 | 0.402270 | 0.168350 | 0.831650 | 00:58 | . 2 | 0.317997 | 0.393800 | 0.173401 | 0.826599 | 00:59 | . 3 | 0.312711 | 0.401414 | 0.163300 | 0.836700 | 00:59 | . 4 | 0.299417 | 0.425201 | 0.170034 | 0.829966 | 00:59 | . 5 | 0.297992 | 0.395112 | 0.161616 | 0.838384 | 00:59 | . 6 | 0.274860 | 0.407347 | 0.166667 | 0.833333 | 00:59 | . 7 | 0.274805 | 0.403472 | 0.176768 | 0.823232 | 00:59 | . 8 | 0.267690 | 0.395439 | 0.158249 | 0.841751 | 00:59 | . 9 | 0.257800 | 0.400395 | 0.154882 | 0.845118 | 00:59 | . 10 | 0.251738 | 0.399942 | 0.159933 | 0.840067 | 00:59 | . 11 | 0.244159 | 0.402886 | 0.161616 | 0.838384 | 00:59 | . 12 | 0.237222 | 0.424677 | 0.168350 | 0.831650 | 00:59 | . 13 | 0.244742 | 0.407957 | 0.154882 | 0.845118 | 00:59 | . 14 | 0.247632 | 0.405676 | 0.154882 | 0.845118 | 00:58 | . test_function(learn) . precision recall f1-score support 0 0.99 0.97 0.98 234 1 0.97 0.98 0.97 246 2 0.91 0.93 0.92 149 3 1.00 1.00 1.00 8 accuracy 0.96 637 macro avg 0.97 0.97 0.97 637 weighted avg 0.96 0.96 0.96 637 0.9623233908948194 . # learn.save(&#39;covid-stage-2-final-2&#39;) . learn.load(&#39;covid-stage-2-final-2&#39;) . &lt;fastai2.learner.Learner at 0x7fedd0ec5b20&gt; . # learn.dls = dls = get_dls(32, 299, 224)#covid.dataloaders(path) # learn.lr_find() # learn.fit_one_cycle(3, lr_max=(1e-2)) . # learn.export(fname=&#39;models/stage-1-10&#39;) learn.save(&#39;stage-1-10&#39;) . learn.load(file=&#39;stage-1-10&#39;) . &lt;fastai2.learner.Learner at 0x7f061f01cd00&gt; . learn.activation_stats.color_dim(4, figsize=(40,5)) . learn.activation_stats.color_dim(30, figsize=(50,20)) .",
            "url": "https://jnfarooq.github.io/MLDS/2012/09/12/COVID.html",
            "relUrl": "/2012/09/12/COVID.html",
            "date": " • Sep 12, 2012"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jnfarooq.github.io/MLDS/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}